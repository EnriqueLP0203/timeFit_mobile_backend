import Membership from "../models/membership.js";
import Gym from "../models/gym.js";

// ‚úÖ Crear una membres√≠a
export const createMembership = async (req, res) => {
  try {
    console.log('üîÑ Creando membres√≠a...');
    console.log('üìù Datos recibidos:', req.body);
    console.log('üë§ Usuario:', req.user.id);
    
    // Verificar que el gym_id pertenece al usuario autenticado
    const gym = await Gym.findOne({ _id: req.body.gym_id, user_id: req.user.id });
    if (!gym) {
      console.log('‚ùå Gym no v√°lido o no tienes permisos');
      return res.status(400).json({ message: "Gimnasio no v√°lido o no tienes permisos" });
    }
    
    console.log('‚úÖ Gym v√°lido encontrado:', gym.name);
    
    const membership = new Membership(req.body);
    await membership.save();
    
    console.log('‚úÖ Membres√≠a creada exitosamente:', membership._id);
    res.status(201).json(membership);
  } catch (error) {
    console.log('‚ùå Error al crear membres√≠a:', error);
    res.status(400).json({ message: error.message });
  }
};

// ‚úÖ Obtener todas las membres√≠as del usuario autenticado (filtradas por sus gyms)
export const getAllMemberships = async (req, res) => {
  try {
    // Obtener todos los gyms del usuario
    const userGyms = await Gym.find({ user_id: req.user.id });
    const gymIds = userGyms.map(gym => gym._id);
    
    // Filtrar membres√≠as por gym_id del usuario
    const memberships = await Membership.find({ 
      gym_id: { $in: gymIds } 
    }).populate("gym_id", "name");
    
    res.json(memberships);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// ‚úÖ Obtener membres√≠as por gym espec√≠fico
export const getMembershipsByGym = async (req, res) => {
  try {
    const { gymId } = req.params;
    console.log('üîç Buscando membres√≠as para gym:', gymId);
    console.log('üë§ Usuario:', req.user.id);
    
    // Verificar que el gym pertenece al usuario
    const gym = await Gym.findOne({ _id: gymId, user_id: req.user.id });
    if (!gym) {
      console.log('‚ùå Gym no encontrado o no pertenece al usuario');
      return res.status(400).json({ message: "Gimnasio no v√°lido o no tienes permisos" });
    }
    
    console.log('‚úÖ Gym v√°lido encontrado:', gym.name);
    
    const memberships = await Membership.find({ gym_id: gymId }).populate("gym_id", "name");
    console.log('üìä Membres√≠as encontradas:', memberships.length);
    
    res.json(memberships);
  } catch (error) {
    console.log('‚ùå Error en getMembershipsByGym:', error);
    res.status(500).json({ message: error.message });
  }
};

// ‚úÖ Obtener una membres√≠a por ID
export const getMembershipById = async (req, res) => {
  try {
    const membership = await Membership.findById(req.params.id).populate("gym_id", "name");
    if (!membership) {
      return res.status(404).json({ message: "Membership not found" });
    }
    
    // Verificar que el gym de la membres√≠a pertenece al usuario
    const gym = await Gym.findOne({ _id: membership.gym_id, user_id: req.user.id });
    if (!gym) {
      return res.status(403).json({ message: "No tienes permisos para ver esta membres√≠a" });
    }
    
    res.json(membership);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// ‚úÖ Actualizar una membres√≠a
export const updateMembership = async (req, res) => {
  try {
    const membership = await Membership.findById(req.params.id);
    if (!membership) {
      return res.status(404).json({ message: "Membership not found" });
    }
    
    // Verificar que el gym de la membres√≠a pertenece al usuario
    const gym = await Gym.findOne({ _id: membership.gym_id, user_id: req.user.id });
    if (!gym) {
      return res.status(403).json({ message: "No tienes permisos para actualizar esta membres√≠a" });
    }
    
    const updated = await Membership.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    res.json(updated);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// ‚úÖ Eliminar una membres√≠a
export const deleteMembership = async (req, res) => {
  try {
    const membership = await Membership.findById(req.params.id);
    if (!membership) {
      return res.status(404).json({ message: "Membership not found" });
    }
    
    // Verificar que el gym de la membres√≠a pertenece al usuario
    const gym = await Gym.findOne({ _id: membership.gym_id, user_id: req.user.id });
    if (!gym) {
      return res.status(403).json({ message: "No tienes permisos para eliminar esta membres√≠a" });
    }
    
    const deleted = await Membership.findByIdAndDelete(req.params.id);
    res.json({ message: "Membership deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
